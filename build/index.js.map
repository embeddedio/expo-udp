{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AA6CxD,wBAAwB;AACxB,MAAM,YAAY,GAAkB,mBAAmB,CAAC,SAAS,CAAC,CAAC;AAEnE,iCAAiC;AACjC,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,IAAY,EAAE,EAAU,EAAsB,EAAE;IAC/E,MAAM,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACxC,OAAO;QACL,iBAAiB,EAAE,CAAC,EAAU,EAAE,IAAY,EAAE,OAAe,EAAE,EAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC;QACnH,IAAI,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE;QACrC,YAAY,EAAE,CAAC,QAAoB,EAAE,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;KAC3G,CAAC;AACJ,CAAC,CAAC;AAEF,iCAAiC;AACjC,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,EAAU,EAAE,IAAY,EAAsB,EAAE;IAC/E,MAAM,YAAY,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACxC,OAAO;QACL,WAAW,EAAE,CAAC,KAAa,EAAE,OAAe,EAAE,OAAe,EAAE,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC;QACnH,IAAI,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE;KACtC,CAAC;AACJ,CAAC,CAAC;AAEF,qBAAqB;AACrB,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,QAA6C,EAA0B,EAAE,CAChH,YAAY,CAAC,WAAW,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;AAExD,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,QAAqC,EAA0B,EAAE,CACtG,YAAY,CAAC,WAAW,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;AAEtD,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,QAA0C,EAA0B,EAAE,CAChH,YAAY,CAAC,WAAW,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;AAE7D,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,QAA6C,EAA0B,EAAE,CAChH,YAAY,CAAC,WAAW,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;AAExD,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,QAAqC,EAA0B,EAAE,CACtG,YAAY,CAAC,WAAW,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;AAEtD,oCAAoC;AACpC,eAAe,YAAY,CAAC","sourcesContent":["import { requireNativeModule } from 'expo-modules-core';\n\n// Define the server interface\nexport interface UdpServer {\n  sendServerMessage(ip: string, port: number, message: string): Promise<string>;\n  stop(): Promise<string>;\n  onDisconnect(callback: () => void): { remove: () => void };\n}\n\n// Define the client interface\nexport interface UdpClient {\n  sendMessage(ip: string, port: number, message: string): Promise<string>;\n  stop(): Promise<string>;\n}\n\n// Define event types\ninterface ServerMessageEvent {\n  message: string;\n  fromIp: string;\n  fromPort: number;\n}\n\ninterface ErrorEvent {\n  error: string;\n}\n\ninterface DisconnectEvent {\n  message: string;\n}\n\n// Define the module interface\nexport interface ExpoUdpModule {\n  initServer(port: number, ip: string): Promise<string>;\n  sendServerMessage(ip: string, port: number, message: string): Promise<string>;\n  stopServer(): Promise<string>;\n  initClient(ip: string, port: number): Promise<string>;\n  sendMessage(ip: string, port: number, message: string): Promise<string>;\n  stopClient(): Promise<string>;\n  addListener(event: 'onServerMessage', listener: (event: ServerMessageEvent) => void): { remove: () => void };\n  addListener(event: 'onServerError', listener: (event: ErrorEvent) => void): { remove: () => void };\n  addListener(event: 'onServerDisconnected', listener: (event: DisconnectEvent) => void): { remove: () => void };\n  addListener(event: 'onClientMessage', listener: (event: ServerMessageEvent) => void): { remove: () => void };\n  addListener(event: 'onClientError', listener: (event: ErrorEvent) => void): { remove: () => void };\n}\n\n// Get the native module\nconst nativeModule: ExpoUdpModule = requireNativeModule('ExpoUdp');\n\n// Export server instance wrapper\nexport const initServer = async (port: number, ip: string): Promise<UdpServer> => {\n  await nativeModule.initServer(port, ip);\n  return {\n    sendServerMessage: (ip: string, port: number, message: string) => nativeModule.sendServerMessage(ip, port, message),\n    stop: () => nativeModule.stopServer(),\n    onDisconnect: (callback: () => void) => nativeModule.addListener('onServerDisconnected', () => callback())\n  };\n};\n\n// Export client instance wrapper\nexport const initClient = async (ip: string, port: number): Promise<UdpClient> => {\n  await nativeModule.initClient(ip, port);\n  return {\n    sendMessage: (msgIp: string, msgPort: number, message: string) => nativeModule.sendMessage(msgIp, msgPort, message),\n    stop: () => nativeModule.stopClient()\n  };\n};\n\n// Listener functions\nexport const addServerMessageListener = (callback: (event: ServerMessageEvent) => void): { remove: () => void } =>\n  nativeModule.addListener('onServerMessage', callback);\n\nexport const addServerErrorListener = (callback: (event: ErrorEvent) => void): { remove: () => void } =>\n  nativeModule.addListener('onServerError', callback);\n\nexport const addServerDisconnectListener = (callback: (event: DisconnectEvent) => void): { remove: () => void } =>\n  nativeModule.addListener('onServerDisconnected', callback);\n\nexport const addClientMessageListener = (callback: (event: ServerMessageEvent) => void): { remove: () => void } =>\n  nativeModule.addListener('onClientMessage', callback);\n\nexport const addClientErrorListener = (callback: (event: ErrorEvent) => void): { remove: () => void } =>\n  nativeModule.addListener('onClientError', callback);\n\n// Export the full module as default\nexport default nativeModule;"]}